---
layout: post
title:  "Robert Fleming Blog 8"
date:   2020-10-29 14:42:28 -0700
categories: jekyll update
---


<h2>Introduction</h2>
In this blog I will talk about all the methods I’ve used to configure my network in order to play multiplayer games with friends. I thought this would be a good addition to a blog I posted two weeks ago as it has similar concepts, where I discussed troubleshooting connection problems with my friends trying to play a multiplayer game. For this blog I will be focusing on the four methods I’ve used to play the popular sandbox game: Minecraft with my friends in the past.

<h2>Option 1: The Easiest Yet Least Convenient</h2>
By far the easiest way to play most PC games with friends is to actually do no network configuration. By that I mean a LAN party. Depending on the application connectivity can be done in two ways. Sometimes the game or software is smart and will allow clients to search the network for active games. This is the case with Minecraft. For other games, all you must do is find out what the private IP address is for the machine hosting the session. This can be done easily in Windows by opening a command prompt and typing `ipconfig`. I have done this with my friends in the past but it is certainly a hassle. For one everybody needs to bring their computers to one local area network and connect to a network. Additionally, you need to make sure there is enough ethernet cables to go around or else you will have to connect wirelessly which seriously degrades the experience by introducing latency issues.

<h2>Option 2: Easy but not Convenient</h2>
This option acts as sort of an intermediary between the prior method and the next. For Minecraft in particular it requires the host to run the server-side executable jar file available at [Minecraft.net]( https://www.minecraft.net/en-us/download/server). This will allow multiple users to play in the same session when not on the same LAN. This method is useful when the users do not have access to edit router port triggering settings. Next both the host and the client must download a VPN (Virtual Private Network) software. For this I used the free version of [LogMeIn Hamachi]( https://www.vpn.net/) This software allows other users to join my LAN from a remote location effectively putting us on the same network. After Hamachi is configured and I give the user my public IP address. We both can join the server by connecting to `localhost` or ` 127.0. 0.1`. This method is nice because it requires little router configuration, but it does come at a cost. When I last used Hamachi, there was a free version that allowed 5 concurrent users on connect to you network. Now for my purposes at the time it was fine as only a handful of friends had wanted to play together. But should I require more VPN connections for more friends it would have costed me. However, for my purposes at this time is sufficed and we were able to play together despite no having access to my router settings.

<h2>Option 3: Not that Easy but Convenient</h2>
This option is what I use primarily from this point onwards as I have the more networking experience now and I also have access to my Router’s configurations. This option is a more traditional server style than the last. Since this server needs to actively communicate with machines located on different networks, I first need to ensure that the lines of transit are open. I will detail the required process for Windows computers as it is the method that I am most familiar with. First like the last step you need to download the server.jar executable from the Minecraft website. Next you need to open up the required port in you Router settings. If this port is left closed traffic from other computers will not be allowed to communicate with the server. To do this you must first land at your Router’s entry page. Similar to Option 1, you must run the `ipconfig` command and retrieve your default gateway. Typing this address into a web browser will allow you to change router settings. You must navigate to the networking option of the router that says either port-triggers or port-forwarding. It differs based on each make and model. Next you must allow the used port by adding a new entry to the port list. The port used by Minecraft is 25565, therefor the port range you should allow is 25565-25565 for both inbound and outbound to ensure only that port is opened. Next you must choose the protocol. It is recommended to allow both UDP and TCP protocol. With that done next you need to allow the port through the windows firewall as it is liable to block it on occasion. Enter the Windows Defender Firewall with Advanced Security tool through the start menu or control panel. Again, like the Router settings we need to allow UDP/TCP traffic both inbound and outbound. Once that is set up, you need to find your public IP address. I use https://www.whatsmyip.org/ for this as its easier than looking it up through Windows networking tools. Once that has been given to my friends, they are able to connect to the server when it is up. This option is by far my preferred method as I have the most control over everything involved. I can set up scripts to determine server uptime amongst many other useful things. However, it does require me to run the server in the background of my main machine or dedicate a separate machine to run the server, so its not perfect for all situations. My next and final option will go over “solving” this problem.

<h2>Option 4: Very Easy, Very Convenient, but Costly</h2>
Like many games, Minecraft allows you to pay to lease an official server. These are called Minecraft Realms. They offer all the benefits of the previous option without requiring the dedicated hardware to run it. However, it does cost a decent amount of money. To lease a server costs $7.99 monthly and while this seems cheap it does add up, given that the game itself is only $26.85 dollars. I have used this option for playing with others and it is convenient to be able to continue the fun even after the server owner decides to log off for the night, but for the cost I generally prefer to run my own server.

<h2>Conclusion</h2>
In this blog I have gone over the methods I’ve used for running multiplayer sessions of Minecraft: Java Addition. It is worth mentioning that for other versions of this game all these steps may not be necessary. In the end I still prefer option 3 as it gives me the most control over the session and doesn’t cost anything. However, for someone not as experienced in networking, I can understand the value in some of the other methods. I hope this blog acts as a concise method of describing the networking options available for both Minecraft and perhaps other multiplayer online games, and provides options so people can choose the option that best caters to their needs.